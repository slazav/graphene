=========================================================================
STSDB -- a simple time-series database

Source code: https://github.com/slazav/stsdb
E-mail: Vladislav Zavjalov <slazav@altlinux.org>

=========================================================================
    Data storage

Each dataset is a separate BerkleyDB file with .db extension, located in
a database directory (default /var/lib/stsdb). Name of file represents
the name of the dataset. Name may contain path symbols '/', but can not
contayn symbols '.:|+ \t\n', You can use name "cryostat/temperature" but
not "../temperature" for your dataset. Currently all subfolders have to
be created manually.

Data are stored as a set of sorted key-value pairs. Key is time in
milliseconds (64-bit unsigned integer), counted from 1970-01-01 UTC.
Duplicated time values are allowed (but can not be correctly shown now).
Value can contain an array if numbers of arbitrary length (data columns)
or some text. The data format can be chosen during the database
creation. Possible variants are: TEXT, INT8, UINT8, INT16, UINT16,
INT32, UINT32, INT64, UINT64, FLOAT, DOUBLE.

Records with 8-bit keys are reserved for database information, for
example the data format and database description. Records with 16-bit
keys are reserved for arbitrary user data. These records are not
affected by regular get/put commands.

=========================================================================
    Command line interface to data

The program stsdb is used to access data from command line.
Usage: stsdb [options] <command> <parameters>

    Options:

-d <path> -- database directory (default /var/lib/stsdb/)
-h        -- write this help message and exit

    Commands for manipulating databases:

$ stsdb create <name> [<data_fmt>] [<description>]  -- create a database file
$ stsdb delete <name>                  -- delete a database file
$ stsdb rename <old_name> <new_name>   -- rename a database file
$ stsdb set_descr <name> <description> -- change database description
$ stsdb info <name>                    -- print database format and description
$ stsdb list                           -- list all databases in the data directory

Delete and rename commands just do simple file operations.
A database can be renamed only if destination does not exists.

    Commands for reading and writing data:

$ stsdb put <name> <time> <value1> ... <valueN> -- write data point
$ stsdb get_next <extended name> [<time1>] -- get next point with t>=time1
$ stsdb get_prev <extended name> [<time2>] -- get previous point with t<=time2

$ stsdb get <extended name> [<time2>] -- For integer and text databases
  get is eqivalent to get_prev. For double databases it does linear
  interpolation between points, or return the last point if time is larger
  then that of the newest point.

$ stsdb get_range <extended name> [<time1>] [<time2>] [<dt>] -- Get
  points in the time range. If parameter dt>1 then data are filtered, only
  points with distance >dt between them are shown. This works fast for any
  ratio of dt and interpoint distance.

Default value for time1 is 0, for time2 is infinity. Word "now" can be
used to specify current time. If the database has no future timestamps,
then commands "get_prev name" and "get_prev name now" are equivalent.

Text values are printed with linebreaks converted to spaces.

The "extended name" used in get_* commands have the following format:
<name>[:<column>][|<filter>]

<column> is a column number (0,1,..), if it exists, then only this
column is shown. If a certain column is requested but data array is not
long enough, a "NaN" value is returned. Columns are ignored for text data.

<filter> is a name of filter program, if it exists, the program is run and
data is filtered through it. The program should be located in the
database directory, program name can not contain '.:|+ \t\n' symbols.

    Commands for deleting data:

$ stsdb del <name> <time>  -- delete a data point
$ stsdb del_range  <name> [<time1>] [<time2>] -- delete all points in the range

    Interactive mode:

$ stsdb interactive -- Interactive mode. Commands are read from stdin.
Allows making many requests without reopening databases.
Allows making a simple server with xinetd.

    Examples:

See examples/ folder in the database distriution


=========================================================================
    HTTP + Simple JSON interface

The simple JSON interface can be used with grafana frontend to access
data (simple_json plugin is needed). Text databases can be viewed as
annotations, and numerical as metrics. Columns can be specified after
database name: <name>:<column>, default column is 0.

Usage: stsdb_http [options]
Options:
 -p <port>  -- tcp port for connections (default 8081)
 -d <path>  -- database path (default /var/lib/stsdb/)
 -v <level> -- be verbose
                0 - write nothing.
                1 - write some information on start
                2 - write info about connections
                3 - write input data
                4 - write output data
 -l <file>  -- log file, use '-' for stdout
               (default /var/log/stsdb.log in daemon mode, '-' in)"
 -f         -- do fork and run as a daemon;
 -h         -- write help message and exit;

=========================================================================
    Matlab interface

Nothing is ready yet. You can use something like this to get data using the
stsdb program:

  [r, out] = system('stsdb get_range my_dataset 1464260400000 now 60000');
  [t val1 val2] = strread(out, '%f %f %f');

=========================================================================
