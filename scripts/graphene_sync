#!/usr/bin/perl

# TODO: multiple dst_db_progs

use warnings;
use strict;
use IPC::Open2;
use Getopt::Long qw(GetOptions Configure);


sub usage {
  print qq*graphene_sync -- script for incremental syncronization of graphene databases.

Usage: graphene_sync [options]

Options:

-S | --src_db_prog <string>
  -- graphene command for accessing source database:
    'graphene -i' (default), 'device -d db', etc.

-D | --dst_db_prog<string>
  -- graphene command for accessing destination database.

-n | --src_names <string>
  -- source database names, ';'-separated.
     Default: syncronize all databases

-p <string> | --dst_pref <string>
  -- set prefix for destination database name (default: '')

-f | --filters  -- copy filters
-F | --full  -- do full (non-incremental backup)
-v | --verb  -- be verbose
-h | --help  -- show help message
*;

  exit 1;
}

my $src_db_prog = 'graphene -i';
my $dst_db_prog = '';
my $src_names = '';
my $dst_pref = '';
my $filters = 0;
my $full = 0;
my $verb = 1;
my $help = 0;
my $win = 4096; # copy database in portions

GetOptions(
  "S|src_db_prog=s"  => \$src_db_prog,
  "D|dst_db_prog=s"  => \$dst_db_prog,
  "n|src_names=s"    => \$src_names,
  "p|dst_pref=s"     => \$dst_pref,
  "F|full"           => \$full,
  "f|filters"        => \$filters,
  "v|verb"           => \$verb,
  "h|help"           => \$help,
) or usage();
usage() if $help;

die "dst_db_prog (-D) is not set" if $dst_db_prog eq '';

sub spp_write {
  my $conn = shift;
  my $cmd  = shift;
#  print "=> $cmd\n" if $verb;
  print $conn $cmd, "\n";
}
sub spp_read {
  my $conn = shift;
  my $return_err = shift || 0;
  my $ret = "";
  while( my $line = <$conn>)  {
    if ($line =~ /^#Error/){
      if ($return_err){
        return $line;
      } else {
        die "$line\n";
      }
    }
    last if $line =~/^\#OK/;
    $ret .= $line;
  }
#  print "<= $ret\n" if $verb;
  return $ret;
}

# start graphene progs
my $spid = open2(\*SO, \*SI, $src_db_prog) or die "can'r run program: $src_db_prog\n";
my $dpid = open2(\*DO, \*DI, $dst_db_prog) or die "can'r run program: $dst_db_prog\n";

# read the header (TODO: parse SPP head)
spp_read(\*SO, 0);
spp_read(\*DO, 0);

# get database list if -n option is not set
my @names;
if ($src_names eq '') {
  if ($full) {
    spp_write(\*SI, "list");
  }
  else {
    spp_write(\*SI, "backup_list");
  }
  my $src_names = spp_read(\*SO, 0);
  @names = sort(split "\n", $src_names);
}
else {
  @names = split ';', $src_names;
}

foreach my $src_name (@names) {
  print "$src_name:" if $verb;
  flush STDOUT if $verb;
  my $dst_name="$dst_pref$src_name";

  spp_write(\*SI, "info $src_name");
  my $src_info = spp_read(\*SO, 0);

  spp_write(\*DI, "info $dst_name");
  my $dst_info = spp_read(\*DO, 1);

  # create dst database if it does not exist
  my $newdb = 0;
  if ($dst_info eq "#Error: $dst_name.db: No such file or directory\n"){
    spp_write(\*DI, "create $dst_name $src_info");
    die "Can't create database: $dst_name\n"
      if (spp_read(\*DO) =~ /^#Error/);
    $newdb = 1;
  }
  elsif ($dst_info ne $src_info) {
    die "Source and destination database have different format:\n$src_info\n$dst_info\n";
  }

  # copy filters if needed
  if ($filters) {
    for (my $f=0; $f<16; $f++){
      spp_write(\*SI, "print_filter $src_name $f");
      my $flt = spp_read(\*SO);
      $flt=~s/\\/\\\\/g;
      $flt=~s/'/\\'/g;
      spp_write(\*DI, "set_filter $src_name $f '$flt'");
      spp_read(\*DO);
    }
  }

  # start_backup
  spp_write(\*SI, "backup_start $src_name");
  my $tstamp = spp_read(\*SO, 0);
  chomp($tstamp);

  # calculate backup range
  $tstamp = 0 if $full;
  print " start data transfer from $tstamp:\n" if $verb;
  flush STDOUT if $verb;

  # delete the range in destination database:
  spp_write(\*DI, "del_range $dst_name $tstamp inf");
  spp_read(\*DO, 0);

  # get range from source database, put values into destination one:
  my $num_total=0;
  while (1) {
    my $num=0;
    spp_write(\*SI, "get_count $src_name $tstamp $win");
    while( my $line = <SO>)  {
      next if $line =~/^\s*$/;
      die $line if $line =~ /^#Error/;
      last if $line =~/^\#OK/;
      my @l = split(/\s+/, $line);
      $tstamp = "$l[0]+";
      spp_write(\*DI, "put $dst_name $line");
      $num++;
    }
    last if $num==0;
    $num_total += $num;

    # read all answers
    while($num>0)  {
      spp_read(\*DO, 0);
      $num--;
    }
    print "  $num_total records\n" if $verb;
    flush STDOUT if $verb;
    last if $num < $win;
  };

  spp_write(\*DI, "sync $src_name");
  spp_read(\*DO, 0);

  spp_write(\*SI, "backup_end $src_name");
  spp_read(\*SO, 0);

  print "  Done\n" if $verb;
  flush STDOUT if $verb;

}

kill HUP => $spid;
kill HUP => $dpid;
waitpid( $spid, 0);
waitpid( $dpid, 0);
