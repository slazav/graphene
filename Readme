TODO:
  -- text line breaks on input and output
  -- double format on output?
  -- access command
  -- simple json output

=========================================================================
STSDB -- a simple time-series database
=========================================================================
    Data storage

A dataset is a separate BerkleyDB file with .db extension, located in a
database directory (default /var/lib/stsdb/). Name of file represents
the name of the dataset. Information about data format and
a description text is stored somewhere in the database when one is
created. One can change description text via stsdb command line
interface.

Data are stored in databases as a set of sorted key-value pairs. Key is
time in milliseconds (64 bit unsigned integer), counted from 1970-01-01
UTC. Duplicated time values are allowed.

Value can carry some text or an array if numbers of arbitrary length
(data columns). The data format can be chosen during the database
creation. Possible variants are: TEXT, INT8, UINT8, INT16, UINT16,
INT32, UINT32, INT64, UINT64, FLOAT, DOUBLE.


=========================================================================
    Command line interface to data

The program stsdb is used to access data from command line.
Usage: stsdb [options] <command> <parameters>

    Options:

-d <path> -- database directory (default /var/lib/stsdb/)
-h        -- write this help message and exit

    Commands for manipulating databases:

stsdb create <name> [<data_fmt>] [<description>]  -- create a database
stsdb delete <name>                  -- delete a database file
stsdb rename <old_name> <new_name>   -- rename a database file
stsdb set_descr <name> <description> -- change database description
stsdb info <name>                    -- print database information
stsdb list                           -- list all databases in the data directory

Delete and rename commands just do simple file operations.
A database can not be renamed if destination file exists.

    Command for adding data:

stsdb put <name> <time> <value1> ... <valueN> -- write data point

    Commands for getting data:

stsdb get_next <name>[:N] [<time1>] -- get next point with t>=time1
stsdb get_prev <name>[:N] [<time2>] -- get previous point with t<=time2
stsdb get_interp <name>[:N] <time>  -- get interpolated point
stsdb get_range  <name>[:N] [<time1>] [<time2>] [<dt>]
                                    -- get all points in the time range
                                       if dt>1 then filter data

In get_* commands the database name can be followed by column number.
Default value for time1 is 0, for time2 is infinity. Word "now" can be used
to specify current time. If the database has no future timestamps,
then commands "get_prev name" and "get_prev name now" are equivalent.

If a certain column is requested but data array is not long enough,
a "NaN" value is returned.

get_interp always print float values, even for integer data.

TODO:
stsdb access -- Interactively read/write data. Allows writing of
multiple points without reopening the database. Allows making a simple
server with xinetd.

    Examples:

$ stsdb -d . create pressure INT16 "Some text"
$ stsdb -d . delete pressure

$ stsdb -d . create pressure DOUBLE "Some text"
$ stsdb -d . rename pressure press
$ stsdb -d . set_descr press "Measured pressure"

$ stsdb -d . info press
DOUBLE	Measured pressure
$ stsdb -d . list
press

=========================================================================
    Simple JSON interface

The simple JSON interface can be used with grafana frontend to access
data

=========================================================================
    Matlab interface

=========================================================================
